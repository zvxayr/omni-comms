<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Chat</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 20px;
    }

    nav a {
      margin-right: 15px;
    }

    form {
      margin-top: 20px;
    }

    label {
      display: block;
      margin-bottom: 5px;
    }

    input,
    textarea {
      width: calc(100% - 20px);
      padding: 10px;
      margin-bottom: 15px;
      border: 1px solid #ccc;
      border-radius: 4px;
    }

    button,
    input[type="submit"] {
      padding: 10px 15px;
      background-color: #28a745;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
    }

    button:hover,
    input[type="submit"]:hover {
      background-color: #218838;
    }

    img {
      height: 240px;
      width: auto;
      max-width: 100%;
      object-fit: contain;
    }

    #messageList {
      display: flex;
      flex-direction: column;
    }

    .messageBubble {
      display: flex;
      flex-direction: column;
      margin: 10px;
      padding: 10px;
      border-radius: 15px;
      max-width: 70%;
    }

    .left {
      background-color: #f1f1f1;
      /* Light gray for incoming messages */
      align-self: flex-start;
    }

    .right {
      background-color: #28a745;
      /* Green for outgoing messages */
      color: white;
      align-self: flex-end;
    }

    .username {
      font-weight: bold;
    }

    .content p {
      margin: 5px 0;
    }
  </style>
</head>

<body>
  <h1>Welcome to the Chat Page</h1>
  <nav>
    <a href="/">Home</a>
    <a href="/chat">Chat</a>
    <a href="/mail">Mail</a>
    <a href="/sms">SMS</a>
    <a href="/call">Call</a>
    <a href="/logout">Logout</a>
  </nav>
  <div>
    <div class="chatRooms">
      {{#if chatRooms.length}}
      <ul>
        {{#each chatRooms}}
        <li class="chatRoom">
          <a href="/chat/{{this.id}}">{{this.name}}</a>
        </li>
        {{/each}}
      </ul>
      {{else}}
      <p>No chat rooms available.</p>
      {{/if}}
    </div>
    <div class="messages">
      <div id="messageList">
        {{#if messages.length}}
        {{#each messages}}
        <div class="messageBubble {{#if (eq this.[0].sender_id ../user.id)}}right{{else}}left{{/if}}">
          <div class="username">{{this.[0].username}}</div>
          <div class="content">
            {{#each this}}
            <p>{{this.content}}</p>
            {{#if this.attachments}}
            {{#each this.attachments}}
            {{#if (eq this.type "image")}}
            <img src="{{this.url}}" alt="Image Attachment" style="max-width: 100%; height: 120px;">
            {{else}}
            <a href="/{{this.url}}" target="_blank">{{this.url}}</a>
            {{/if}}
            {{/each}}
            {{/if}}
            {{/each}}
          </div>
        </div>
        {{/each}}
        {{else}}
        <p>Be the first to send a message</p>
        {{/if}}
      </div>
    </div>

    <div>
      <form id="messageForm" action="POST" onsubmit="return sendMessage(event);">
        <input type="file" name="attachments" id="attachments" multiple="multiple" />
        <input type="text" id="messageInput" placeholder="Type your message here..." required />
        <input type="submit" value="Send" />
      </form>
    </div>
  </div>
  <script src="/socket.io/socket.io.js"></script>
  <script>
    const socket = io();

    // Join the current chat room when the page loads
    const chatRoomId = window.location.pathname.split("/").pop();
    console.log(chatRoomId);
    socket.emit("joinRoom", chatRoomId);


    async function sendMessage(event) {
      event.preventDefault(); // Prevent the default form submission
      const messageInput = document.getElementById("messageInput");
      const attachmentInput = document.getElementById("attachments"); // Create a FormData object
      const formData = new FormData();
      formData.append("message", messageInput.value);

      // Append all selected files to FormData
      for (const file of attachmentInput.files) {
        formData.append("attachments", file);
      }

      // Get the current chat room ID from the URL
      const chatRoomId = window.location.pathname.split("/").pop();

      try {
        // Send the FormData to the server
        const response = await fetch(`/chat/${chatRoomId}`, { method: "POST", body: formData, });

        // Check if the response is ok
        if (response.ok) {
          const result = await response.json(); console.log(result);

          // Add the message to the messages list
          const newMessage = document.createElement("li");
          newMessage.textContent = messageInput.value;
          // document.getElementById("messageList").appendChild(newMessage);

          // Clear the input fields
          messageInput.value = "";
          attachmentInput.value = "";
        }
        else { console.error("Error posting message:", response.statusText); }
      }
      catch (error) { console.error("Error:", error); }
    }

// Listen for new messages from other users
socket.on("newMessage", (message) => {
  console.log(message);

  // Determine if the message is sent by the current user or another user
  const isCurrentUser = message.senderId === {{user.id}}; // Replace {{user.id}} with actual user ID variable
  // Check if the last message bubble is from the same sender
  const messageList = document.getElementById("messageList");
  const lastMessageBubble = Array.from(messageList.children).slice(-1)[0];
  let contentDiv;

  // Create a new message bubble if there's no last bubble or if it's from a different sender
  if (!lastMessageBubble || lastMessageBubble.firstElementChild.innerHTML !== message.username) {
    const newMessageBubble = document.createElement("div");
    newMessageBubble.classList.add("messageBubble", isCurrentUser ? "right" : "left");
    newMessageBubble.dataset.senderId = message.senderId; // Store sender ID for comparison

    newMessageBubble.innerHTML = `
      <div class="username">${message.username}</div>
      <div class="content">
        <p>${message.content}</p>
      </div>
    `;

    messageList.appendChild(newMessageBubble);
    contentDiv = newMessageBubble.querySelector('.content');
  } else {
    // If the last message bubble is from the same sender, append content to it
    contentDiv = lastMessageBubble.querySelector('.content');
    const newContentParagraph = document.createElement('p');
    newContentParagraph.textContent = message.content;
    contentDiv.appendChild(newContentParagraph);
  }

  // Check if there are attachments and construct their HTML
  if (message.attachments && message.attachments.length > 0) {
    for (let attachment of message.attachments) {
      let attachmentElement;

      if (attachment.type === "image") {
        attachmentElement = document.createElement('img');
        attachmentElement.src = attachment.url;
        attachmentElement.alt = "Image Attachment";
        attachmentElement.style.maxWidth = "100%";
        attachmentElement.style.height = "120px";
      } else {
        attachmentElement = document.createElement('a');
        attachmentElement.href = `/${attachment.url}`;
        attachmentElement.target = "_blank"; // Open in a new tab
        attachmentElement.textContent = attachment.url;
      }

      contentDiv.appendChild(attachmentElement);
    }
  }

  // Optionally scroll to the bottom of the message list
  messageList.scrollTop = messageList.scrollHeight;
});


  </script>
</body>

</html>